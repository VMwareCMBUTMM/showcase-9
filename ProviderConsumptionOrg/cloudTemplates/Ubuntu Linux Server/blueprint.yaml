formatVersion: 2
name: Ubuntu Linux Server
description: Showcase Ubuntu server
version: 4
inputs:
  vm_name:
    type: string
    title: Virtual Machine Name
    description: Enter a name for the Virtual Machine
    pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
  os_version:
    type: string
    title: Virtual Machine Size
    description: Select a Ubuntu Version
    default: vmi-290e771b30ccfb36a
    oneOf:
      - title: Ubuntu 18.04
        const: vmi-3b7b86a17aca6266b
      - title: Ubuntu 20.04
        const: vmi-ef4ed6760ef315214
      - title: Ubuntu 22.04
        const: vmi-d15db9b1a4335d781
      - title: Ubuntu 24.04
        const: vmi-290e771b30ccfb36a
  namespace:
    type: string
    title: Namespace
    $data: /data/namespaces
  storageClass:
    type: string
    title: Storage Class
    $data: /data/storageclasses?namespace={{namespace}}
  vm_size:
    type: string
    title: Virtual Machine Size
    description: Select a Virtual Machine Size
    $data: /data/virtualmachineclasses?namespace={{namespace}}
  username:
    type: string
    description: The username you would like to have for the admin account.
    default: demouser
    title: Admin Username
  password:
    type: string
    description: The password you would like to use for the admin account.
    title: Admin Password
    default: VMware1!
    pattern: '[a-z0-9A-Z@#$]+'
    encrypted: true
resources:
  Namespace:
    type: CCI.Supervisor.Namespace
    properties:
      name: ${input.namespace}
      existing: true
  SSH_LB:
    type: CCI.Supervisor.Resource
    properties:
      context: ${resource.Namespace.id}
      manifest:
        apiVersion: vmoperator.vmware.com/v1alpha3
        kind: VirtualMachineService
        metadata:
          name: ${input.vm_name}
        spec:
          selector:
            vm-lb-selector: ${input.vm_name}
          type: LoadBalancer
          ports:
            - name: ssh
              protocol: TCP
              port: 22
              targetPort: 22
  VM:
    type: CCI.Supervisor.Resource
    dependsOn:
      - BOOTSTRAP
      - SSH_LB
    properties:
      context: ${resource.Namespace.id}
      manifest:
        apiVersion: vmoperator.vmware.com/v1alpha3
        kind: VirtualMachine
        metadata:
          name: ${input.vm_name}
          labels:
            vm-selector: ${input.vm_name}
            vm-lb-selector: ${input.vm_name}
        spec:
          className: ${input.vm_size}
          imageName: ${input.os_version}
          storageClass: ${input.storageClass}
          powerState: PoweredOn
          network:
            domainName: showcase.tmm.broadcom.lab
            nameservers:
              - 10.138.241.1
              - 10.138.241.2
            searchDomains:
              - showcase.tmm.broadcom.lab
          bootstrap:
            cloudInit:
              rawCloudConfig:
                name: ${input.vm_name}-bootstrap-secret
                key: user-data
  BOOTSTRAP:
    type: CCI.Supervisor.Resource
    properties:
      context: ${resource.Namespace.id}
      manifest:
        apiVersion: v1
        kind: Secret
        metadata:
          name: ${input.vm_name}-bootstrap-secret
          labels:
            vm-selector: ${input.vm_name}
        stringData:
          user-data: |
            #cloud-config
            hostname: ${input.vm_name}
            package_upgrade: true
            package_reboot_if_required: true
            apt_source:
              - source: deb http://archive.ubuntu.com/ubuntu main universe multiverse restricted

            packages:
              - open-vm-tools

            ssh_pwauth: true

            users:
              - name: ${input.username}
                lock_passwd: false
                sudo: ALL=(ALL) NOPASSWD:ALL
                groups: [sudo]
                shell: /bin/bash

            chpasswd:
              users:
                - name: ${input.username}
                  password: ${input.password}
                  type: text
              expire: false

            runcmd:
              ### Cloud-init script for agents
              #------------------ Install Telegraf Agent  --------------------#
              # download helper script
              - wget -P /tmp/ --no-check-certificate https://10.138.242.69/downloads/salt/telegraf-utils.sh
              - chmod 755 /tmp/telegraf-utils.sh
              
              #Get a token
              #- curl -o /tmp/token.txt -k -H 'Content-Type: application/json' -d '{"username": "svc-ops-auto","authSource": "LOCAL","password": "VMware123"}' 'https://ops-a.vcf02.showcase.tmm.broadcom.lab/suite-api/api/auth/token/acquire?_no_links=true'
              # Convert the above curl to base64 to escape special characters in the password
              - echo "ICMhL2Jpbi9iYXNoCmN1cmwgLW8gL3RtcC90b2tlbi50eHQgLWsgLUggJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbicgLWQgJ3sidXNlcm5hbWUiOiAic3ZjLW9wcy1hdXRvIiwiYXV0aFNvdXJjZSI6ICJMT0NBTCIsInBhc3N3b3JkIjogIlZNd2FyZTEyM14ifScgJ2h0dHBzOi8vb3BzLWEudmNmMDIuc2hvd2Nhc2UudG1tLmJyb2FkY29tLmxhYi9zdWl0ZS1hcGkvYXBpL2F1dGgvdG9rZW4vYWNxdWlyZT9fbm9fbGlua3M9dHJ1ZScg" | base64 -d > /tmp/run_curl.sh
              - chmod +x /tmp/run_curl.sh
              - /tmp/run_curl.sh
              - TOKEN=`cat /tmp/token.txt | grep -o '"token":"[^"]*"' | sed 's/"token":"\|"//g'`

              #Install the agent
              - /tmp/telegraf-utils.sh product-managed -c 10.138.242.69 -t $TOKEN -v 10.138.242.65 -k 1
              - echo 'Telegraf Agent Installed' >> /tmp/finished.txt
              #----------------------------------------------------------------#
              #-------------------- Install Logs Agent  -----------------------#
              # download helper script
              - wget -P /tmp/ --quiet http://lvn-sc-www.showcase.tmm.broadcom.lab/downloads/vmware-log-insight-agent_8.14.0-22552671_all.deb
              
              #Install the agent
              - dpkg -i /tmp/vmware-log-insight-agent_8.14.0-22552671_all.deb
              - export logs_ip="opslogs-a.vcf02.showcase.tmm.broadcom.lab"
              - sed -i "s/;hostname=OPERATIONS_FOR_LOGS/hostname=$logs_ip/g" /var/lib/loginsight-agent/liagent.ini
              - sed -i "0,/;ssl=yes/s/;ssl=yes/ssl_accept_any=yes/" /var/lib/loginsight-agent/liagent.ini
              - systemctl restart liagentd
              - systemctl enable liagentd
              - echo 'Logs Agent Installed' >> /tmp/finished.txt
              #----------------------------------------------------------------#
              - echo 'Cloud-init is done!' >> /tmp/finished.txt
